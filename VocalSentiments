pip install librosa tensorflow keras sklearn matplotlib numpy pandas





# Import required libraries
import librosa
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.optimizers import Adam

# Function to extract MFCC features from an audio file
def extract_features(audio_path, max_pad_len=174):
    try:
        audio, sample_rate = librosa.load(audio_path, res_type='kaiser_fast', duration=2.5, sr=22050, offset=0.5)
        mfcc = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)
        pad_width = max_pad_len - mfcc.shape[1]
        mfcc = np.pad(mfcc, pad_width=((0, 0), (0, pad_width)), mode='constant')
        return mfcc
    except Exception as e:
        print(f"Error encountered while parsing file: {audio_path}, {e}")
        return None

# Directory where the dataset is stored (e.g., RAVDESS dataset)
data_dir = "path_to_dataset_directory"

# Prepare data
labels = []
features = []
for root, _, files in os.walk(data_dir):
    for file in files:
        if file.endswith('.wav'):
            file_path = os.path.join(root, file)
            emotion = file.split("-")[2]  # Extract emotion from file name (depends on dataset)
            features.append(extract_features(file_path))
            labels.append(emotion)

# Convert to numpy arrays
features = np.array(features)
labels = np.array(labels)

# Encode the labels (emotions) into integers
le = LabelEncoder()
y = to_categorical(le.fit_transform(labels))

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, y, test_size=0.2, random_state=42, shuffle=True)

# Reshape the features for CNN input (as CNN expects 2D input)
X_train = X_train.reshape(X_train.shape[0], 40, 174, 1)
X_test = X_test.reshape(X_test.shape[0], 40, 174, 1)

# --- CNN MODEL ---
model = Sequential()

# 1st Conv layer
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(40, 174, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

# 2nd Conv layer
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

# 3rd Conv layer
model.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

# Flatten and Dense layers
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(64, activation='relu'))
model.add(Dense(y_train.shape[1], activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# --- EVALUATION ---
# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=1)
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

# --- PLOTTING TRAINING HISTORY ---
# Plot training & validation accuracy and loss
plt.figure(figsize=(12, 4))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Test Accuracy')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Test Loss')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()

plt.show()

# --- MAKING PREDICTIONS ---
def predict_emotion(audio_path):
    feature = extract_features(audio_path)
    feature = feature.reshape(1, 40, 174, 1)  # Reshape for the model
    predicted = model.predict(feature)
    emotion = le.inverse_transform(np.argmax(predicted, axis=1))
    return emotion[0]

# Example usage: Predict emotion from a new audio file
new_audio_file = 'path_to_new_audio.wav'
predicted_emotion = predict_emotion(new_audio_file)
print(f"Predicted Emotion: {predicted_emotion}")
